#!/usr/bin/env python3

import sys
import socket
import time
import datetime
import select
import json

MSG_SIZE = 1500
DATA_SIZE = 1000
TIMEOUT = 30

seqn = 0
sent = []

def log(string):
  sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")
  sys.stderr.flush()

def send_next_packet():
  global seqn
  global sent

  data = sys.stdin.read(DATA_SIZE)
  if (len(data) > 0):
    msg = {"sequence": seqn, "data": data, "ack": False, "eof": False}
    seqn += len(data)

    sent.append(msg)

    msg = json.dumps(msg)
    if sock.sendto(msg.encode('ascii'), dest) < len(msg):
      log("[error] unable to fully send packet")
    else:
      log("[send data] " + str(seqn) + " (" + str(len(data)) + ")")
    return True
  else:
    return False
 
def send_whole():
  global sent
  global seqn

  sent = []
  seqn = 0

  while send_next_packet():
    pass

  msg = {"eof": True, "data": "", "sequence": seqn, "ack": False}
  sent.append(msg)
  sock.sendto(json.dumps(msg).encode('ascii'), dest)

# Bind to localhost and an ephemeral port
ip_port = sys.argv[1]
udp_ip = ip_port[0:ip_port.find(":")]
udp_port = int(ip_port[ip_port.find(":")+1:])
dest = (udp_ip, udp_port)
seqn = 0

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.settimeout(TIMEOUT)

send_whole()

temp_ack = 0

while True:
  log("ABOUT TO SLEEP")
  result = sock.recvfrom(MSG_SIZE)

  if result:
    (data, addr) = result
    try:
      decoded = json.loads(data)
      if decoded['ack'] - 1 == sent[-1]['ack']:
        break
      elif decoded['ack'] == temp_ack:
        log("[recv ack] " + str(temp_ack))
        cur_msg = sent[sent.index([m for m in sent if m['sequence'] + len(m['data']) == temp_ack][0]) + 1]
        if sock.sendto(cur_msg.encode('ascii'), dest) < len(cur_msg):
          log("[error] unable to fully send packet")
        else:
          log("[send data] " + str(temp_ack) + " (" + str(len(data)) + ")")

      temp_ack = decoded['ack']

    except (ValueError, KeyError, TypeError) as e:
      log("[recv corrupt packet]")
      raise e
  else:
    log("[error] timeout")
    send_whole()

sock.sendto(json.dumps({"eof": True, "data": "", "sequence": seqn, "ack": False}).encode('ascii'), dest)
sys.exit(0)
